buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}-${minecraft_version}"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://cursemaven.com" }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:vault-hunters-official-mod-458203:${vault_hunters_version}")
    implementation fg.deobf("curse.maven:ispawner-533792:${ispawner_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinextras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixinextras_version}")) {
        jarJar.ranged(it, "[${mixinextras_version},)")
    }

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

tasks.jarJar.finalizedBy('reobfJarJar')

jar.finalizedBy('reobfJar')

tasks.named('jarJar', Jar).configure {
    archiveClassifier.set('')
    archiveBaseName.set(archivesBaseName)
    archiveVersion.set(version)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}